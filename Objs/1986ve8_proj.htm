<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objs\1986ve8_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objs\1986ve8_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Feb 01 11:33:44 2021
<BR><P>
<H3>Maximum Stack Usage =        344 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; CM_Parame_Start_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f2]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryMngFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryMngFault_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVCall_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVCall_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">Systick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Systick_Handler</a><BR>
 <LI><a href="#[c]">FT_IF0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">FT_IF0_Handler</a><BR>
 <LI><a href="#[d]">FT_IF1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FT_IF1_Handler</a><BR>
 <LI><a href="#[e]">FT_IF2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FT_IF2_Handler</a><BR>
 <LI><a href="#[f]">FT_IF3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">FT_IF3_Handler</a><BR>
 <LI><a href="#[10]">CLK_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">CLK_IF_Handler</a><BR>
 <LI><a href="#[11]">PVD_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PVD_IF_Handler</a><BR>
 <LI><a href="#[12]">RTC_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">RTC_IF_Handler</a><BR>
 <LI><a href="#[13]">BKP_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BKP_IF_Handler</a><BR>
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">EXT_INTERROR0_Handler</a><BR>
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">EXT_INTERROR1_Handler</a><BR>
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">EXT_INTERROR2_Handler</a><BR>
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">EXT_INTERROR3_Handler</a><BR>
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EXT_INTERROR4_Handler</a><BR>
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EXT_INTERROR5_Handler</a><BR>
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EXT_INTERROR6_Handler</a><BR>
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">EXT_INTERROR7_Handler</a><BR>
 <LI><a href="#[1c]">IF_ERR_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IF_ERR_SCR_Handler</a><BR>
 <LI><a href="#[1d]">IF_FIN_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IF_FIN_SCR_Handler</a><BR>
 <LI><a href="#[1e]">DMA_ERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DMA_ERR_Handler</a><BR>
 <LI><a href="#[1f]">DMA_DONE0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMA_DONE0_Handler</a><BR>
 <LI><a href="#[20]">DMA_DONE1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMA_DONE1_Handler</a><BR>
 <LI><a href="#[21]">IRQ_PORTA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ_PORTA_Handler</a><BR>
 <LI><a href="#[22]">IRQ_PORTB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ_PORTB_Handler</a><BR>
 <LI><a href="#[23]">IRQ_PORTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ_PORTC_Handler</a><BR>
 <LI><a href="#[24]">IRQ_PORTD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ_PORTD_Handler</a><BR>
 <LI><a href="#[25]">IRQ_PORTE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ_PORTE_Handler</a><BR>
 <LI><a href="#[26]">IRQ_PORTF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ_PORTF_Handler</a><BR>
 <LI><a href="#[27]">INT_ETH0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">INT_ETH0_Handler</a><BR>
 <LI><a href="#[28]">INT_ETH1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">INT_ETH1_Handler</a><BR>
 <LI><a href="#[29]">INT_SPW0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">INT_SPW0_Handler</a><BR>
 <LI><a href="#[2a]">INT_SPW1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">INT_SPW1_Handler</a><BR>
 <LI><a href="#[2e]">INT_TMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">INT_TMR3_Handler</a><BR>
 <LI><a href="#[2f]">INT_TMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">INT_TMR4_Handler</a><BR>
 <LI><a href="#[30]">INT_TMR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">INT_TMR5_Handler</a><BR>
 <LI><a href="#[31]">INT_CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">INT_CAN0_Handler</a><BR>
 <LI><a href="#[32]">INT_CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">INT_CAN1_Handler</a><BR>
 <LI><a href="#[33]">INT_CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">INT_CAN2_Handler</a><BR>
 <LI><a href="#[34]">INT_CAN3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">INT_CAN3_Handler</a><BR>
 <LI><a href="#[35]">INT_CAN4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">INT_CAN4_Handler</a><BR>
 <LI><a href="#[36]">INT_SSP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">INT_SSP0_Handler</a><BR>
 <LI><a href="#[37]">INT_SSP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">INT_SSP1_Handler</a><BR>
 <LI><a href="#[38]">INT_SSP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">INT_SSP2_Handler</a><BR>
 <LI><a href="#[39]">INT_SSP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">INT_SSP3_Handler</a><BR>
 <LI><a href="#[3b]">INT_UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">INT_UART1_Handler</a><BR>
 <LI><a href="#[3c]">INT_UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">INT_UART2_Handler</a><BR>
 <LI><a href="#[3d]">INT_UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">INT_UART3_Handler</a><BR>
 <LI><a href="#[3e]">INT_USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">INT_USB_Handler</a><BR>
 <LI><a href="#[3f]">INT_RX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">INT_RX_ARC0_Handler</a><BR>
 <LI><a href="#[40]">INT_TX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">INT_TX_ARC0_Handler</a><BR>
 <LI><a href="#[41]">INT_RX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">INT_RX_ARC1_Handler</a><BR>
 <LI><a href="#[42]">INT_TX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">INT_TX_ARC1_Handler</a><BR>
 <LI><a href="#[44]">INT_MIL1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">INT_MIL1_Handler</a><BR>
 <LI><a href="#[46]">INT_ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">INT_ADC1_Handler</a><BR>
 <LI><a href="#[47]">INT_DAC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">INT_DAC0_Handler</a><BR>
 <LI><a href="#[48]">INT_DAC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">INT_DAC1_Handler</a><BR>
 <LI><a href="#[49]">INT_CRYPTO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">INT_CRYPTO_Handler</a><BR>
 <LI><a href="#[4a]">INT_CRC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">INT_CRC_Handler</a><BR>
 <LI><a href="#[4b]">INT_ECC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">INT_ECC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">BKP_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[10]">CLK_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1f]">DMA_DONE0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[20]">DMA_DONE1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1e]">DMA_ERR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[c]">FT_IF0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[d]">FT_IF1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[e]">FT_IF2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[f]">FT_IF3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1c]">IF_ERR_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1d]">IF_FIN_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[45]">INT_ADC0_Handler</a> from adc.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[46]">INT_ADC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[31]">INT_CAN0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[32]">INT_CAN1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[33]">INT_CAN2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[34]">INT_CAN3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[35]">INT_CAN4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4a]">INT_CRC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[49]">INT_CRYPTO_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[47]">INT_DAC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[48]">INT_DAC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4b]">INT_ECC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[27]">INT_ETH0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[28]">INT_ETH1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[43]">INT_MIL0_Handler</a> from mko.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[44]">INT_MIL1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3f]">INT_RX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[41]">INT_RX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[29]">INT_SPW0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2a]">INT_SPW1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[36]">INT_SSP0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[37]">INT_SSP1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[38]">INT_SSP2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[39]">INT_SSP3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2b]">INT_TMR0_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2c]">INT_TMR1_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2d]">INT_TMR2_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2e]">INT_TMR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2f]">INT_TMR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[30]">INT_TMR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[40]">INT_TX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[42]">INT_TX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3a]">INT_UART0_Handler</a> from uarts.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3b]">INT_UART1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3c]">INT_UART2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3d]">INT_UART3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3e]">INT_USB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[21]">IRQ_PORTA_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[22]">IRQ_PORTB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[23]">IRQ_PORTC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[24]">IRQ_PORTD_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[25]">IRQ_PORTE_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[26]">IRQ_PORTF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[6]">MemoryMngFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[11]">PVD_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[12]">RTC_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[9]">SVCall_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[b]">Systick_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve8t.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[114]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[116]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[117]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[118]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[119]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[120]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[121]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[122]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[127]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[128]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[129]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[12e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[135]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[136]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; CM_Parame_Start_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[138]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[139]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[13a]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[13b]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[13c]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[c7]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adii_data_rev
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_struct_rev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpp_struct_rev
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buff_rev16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Pwr_Off_Bound_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Offset_Set
</UL>

<P><STRONG><a name="[13d]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[5c]"></a>System_Init</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, sysinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 1932 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; CM_Parame_Start_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_val_from_bound
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_definer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Processor_1s
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Mode_Processor_1s
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speedy_Mode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM_from_uint16_val
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwr_State
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_1s_step
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_from_SubAddr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Perepherial_Devices_On
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Off_All_Devices
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Read_Ptr_To_Defended_Mem
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measurment_Processor_1s
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_time_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_request
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_mem_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_forced_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_constatnt_mode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_arch_count_offset_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Pwr_Off_Bound_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Offset_Set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_IVect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_sec_parts
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Format_Mem
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Initiate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Finish
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Constant_Mode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Start_Measurement
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Meas_Processor_1s
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Data_Get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Processor_1s
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Command_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Processor_1s
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9d]"></a>Write_Frame</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Format_Mem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem
</UL>

<P><STRONG><a name="[96]"></a>Read_Frame</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>Get_Max_Data_Frame_Num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eerom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_defended_mem_addr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Read_Ptr_To_Defended_Mem
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Format_Mem</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Format_Mem &rArr; Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Check_Mem</STRONG> (Thumb, 134 bytes, Stack size 208 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Check_Mem &rArr; Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>MKO_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MKO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>MKO_IVect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MKO_IVect
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Set_Busy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>

<P><STRONG><a name="[a4]"></a>Release_Busy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>

<P><STRONG><a name="[b4]"></a>Set_AW_bit_7</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
</UL>

<P><STRONG><a name="[97]"></a>Write_to_SubAddr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Write_to_SubAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Busy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>Read_from_SubAddr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_from_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>BlockMKOTransmitter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mko.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>INT_MIL0_Handler</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INT_MIL0_Handler &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>Get_MKO_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mko.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>WDT_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>UART0_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>GetCRC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>

<P><STRONG><a name="[a7]"></a>UART0_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_constatnt_mode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_time_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_constatnt_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
</UL>

<P><STRONG><a name="[c5]"></a>UART0_PacketInWaitingOrReady</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
</UL>

<P><STRONG><a name="[a9]"></a>UART0_GetPacket</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_GetPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
</UL>

<P><STRONG><a name="[3a]"></a>INT_UART0_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uarts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ADC_Init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>INT_ADC0_Handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INT_ADC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Timers_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>INT_TMR0_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>INT_TMR1_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>INT_TMR2_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Timers_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_On_All_Devices
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Perepherial_Devices_On
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Off_All_Devices
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_time_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_mem_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_constatnt_mode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Timers_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
</UL>

<P><STRONG><a name="[6f]"></a>Timers_Status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_On_All_Devices
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tech_SA_Transaction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Perepherial_Devices_On
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Off_All_Devices
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_time_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_mem_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_constatnt_mode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Time_Set</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Time_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Get_Time_s</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Interval
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterval
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_time_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Processor_1s
</UL>

<P><STRONG><a name="[85]"></a>Get_Time_sec_parts</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_Time_sec_parts
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>SetInterval</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[af]"></a>Check_Interval</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[db]"></a>GPIO_Get_CM_Id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_1s_step
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
</UL>

<P><STRONG><a name="[da]"></a>GPIO_TM</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_Pwr</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_On_All_Devices
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Perepherial_Devices_On
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Off_All_Devices
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_MKO_Id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr_from_gpio
</UL>

<P><STRONG><a name="[77]"></a>Pwr_current_process</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pwr_current_process &rArr; Get_Modules_Current &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>_calc_defended_mem_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
</UL>

<P><STRONG><a name="[b3]"></a>Save_Data_Frame</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_defended_mem_addr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[8d]"></a>Move_Read_Ptr_To_Defended_Mem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Move_Read_Ptr_To_Defended_Mem
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>Load_Data_Frame</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Load_Data_Frame &rArr; Read_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_AW_bit_7
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Write_Parameters</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_Parameters &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Processor_1s
</UL>

<P><STRONG><a name="[b7]"></a>_read_cm_parameters_frame_with_crc16_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
</UL>

<P><STRONG><a name="[b8]"></a>Read_Parameters</STRONG> (Thumb, 74 bytes, Stack size 280 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Command_Init
</UL>

<P><STRONG><a name="[bb]"></a>_cm_params_set_default</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Command_Init
</UL>

<P><STRONG><a name="[b9]"></a>CM_Parame_Full_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM_Parame_Full_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_params_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Command_Init
</UL>

<P><STRONG><a name="[63]"></a>CM_Parame_Start_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CM_Parame_Start_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_params_set_default
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>CM_Parame_Command_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CM_Parame_Command_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_params_set_default
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>CM_Parame_Operating_Time_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbkap.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>CM_Parame_Comparison</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM_Parame_Comparison
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frames_Additional_Build
</UL>

<P><STRONG><a name="[71]"></a>CM_Parame_Processor_1s</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CM_Parame_Processor_1s &rArr; Get_MCU_Temp &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>get_val_from_bound</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speedy_Mode
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Set_Speedy_Mode</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_Speedy_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_val_from_bound
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Speed_Mode_Processor_1s</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Measurment_Processor_1s</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>ADII_Meas_Processor_1s</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>DIR_Meas_Processor_1s</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>_frame_definer</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _frame_definer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>_rev_u32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rev_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
</UL>

<P><STRONG><a name="[64]"></a>Sys_Frame_Init</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Sys_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_definer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Sys_Frame_Build</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sys_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_definer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frames_Interval_Build
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frames_Additional_Build
</UL>

<P><STRONG><a name="[c0]"></a>Sys_Frames_Additional_Build</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sys_Frames_Additional_Build &rArr; Sys_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Comparison
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Processor_1s
</UL>

<P><STRONG><a name="[c1]"></a>Sys_Frames_Interval_Build</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sys_Frames_Interval_Build &rArr; Sys_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Processor_1s
</UL>

<P><STRONG><a name="[72]"></a>Sys_Frame_Processor_1s</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sys_Frame_Processor_1s &rArr; Sys_Frames_Interval_Build &rArr; Sys_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frames_Interval_Build
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frames_Additional_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>get_mko_addr_from_gpio</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_mko_addr_from_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MKO_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr
</UL>

<P><STRONG><a name="[5d]"></a>get_mko_addr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_mko_addr &rArr; get_mko_addr_from_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr_from_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>Debug_Get_Packet</STRONG> (Thumb, 206 bytes, Stack size 280 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Debug_Get_Packet &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>F_Trans</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PacketInWaitingOrReady
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_On
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_request
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_mem_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_forced_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_arch_count_offset_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Pwr_Off_Bound_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Offset_Set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Initiate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Finish
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Constant_Mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Start_Measurement
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Data_Get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
</UL>

<P><STRONG><a name="[99]"></a>Tech_SA_Transaction</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Tech_SA_Transaction &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_PacketInWaitingOrReady
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Pereph_On_and_Get_ID_Frame</STRONG> (Thumb, 240 bytes, Stack size 288 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Pereph_On_and_Get_ID_Frame &rArr; GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>_buff_rev16</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mbkap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>

<P><STRONG><a name="[c8]"></a>uint16_to_log2_uint8_t</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mbkap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[b0]"></a>Get_Modules_Current</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_Modules_Current &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
</UL>

<P><STRONG><a name="[bd]"></a>Get_MCU_Temp</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_MCU_Temp &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Processor_1s
</UL>

<P><STRONG><a name="[d8]"></a>Pwr_On_All_Devices</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, power_management.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>

<P><STRONG><a name="[65]"></a>Pwr_Off_All_Devices</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwr_Off_All_Devices &rArr; GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>Pwr_Perepherial_Devices_On</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwr_Perepherial_Devices_On &rArr; GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>Pwr_Ctrl_by_State</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwr_Ctrl_by_State &rArr; GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwr_State
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
</UL>

<P><STRONG><a name="[91]"></a>Set_Pwr_State</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Set_Pwr_State &rArr; Pwr_Ctrl_by_State &rArr; GPIO_Pwr &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>crc16_ccitt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
</UL>

<P><STRONG><a name="[d9]"></a>Set_STM</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TM
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM_from_uint16_val
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_1s_step
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
</UL>

<P><STRONG><a name="[62]"></a>Init_STM</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_STM &rArr; Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_CM_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>STM_1s_step</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM_1s_step &rArr; Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_CM_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>Set_STM_from_uint16_val</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_STM_from_uint16_val &rArr; Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>MPP_Pwr_Off_Bound_Set</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MPP_Pwr_Off_Bound_Set &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>MPP_Offset_Set</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MPP_Offset_Set &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>MPP_Frame_Init</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MPP_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
</UL>

<P><STRONG><a name="[dd]"></a>MPP_On</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MPP_On &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_forced_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Init
</UL>

<P><STRONG><a name="[69]"></a>MPP_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = MPP_Init &rArr; MPP_Pwr_Off_Bound_Set &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_On
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Pwr_Off_Bound_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Offset_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>MPP_time_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPP_time_set &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>MPP_constatnt_mode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPP_constatnt_mode &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>MPP_Off</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mpp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>

<P><STRONG><a name="[79]"></a>MPP_arch_count_offset_get</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MPP_arch_count_offset_get &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MPP_struct_request</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MPP_struct_request &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>MPP_Frame_Build</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPP_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_get
</UL>

<P><STRONG><a name="[e0]"></a>_mpp_struct_rev</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mpp_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_get
</UL>

<P><STRONG><a name="[7a]"></a>MPP_struct_get</STRONG> (Thumb, 180 bytes, Stack size 144 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MPP_struct_get &rArr; MPP_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpp_struct_rev
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>MPP_mem_init</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MPP_mem_init &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>MPP_forced_start</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, mpp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MPP_forced_start &rArr; MPP_On &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_On
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>_mpp_num_from_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>DIR_Start_Measurement</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DIR_Start_Measurement &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>DIR_Frame_Init</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DIR_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
</UL>

<P><STRONG><a name="[6a]"></a>DIR_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = DIR_Init &rArr; DIR_Start_Measurement &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Start_Measurement
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>DIR_constatnt_mode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>

<P><STRONG><a name="[e3]"></a>DIR_Frame_Build</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DIR_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Data_Get
</UL>

<P><STRONG><a name="[e4]"></a>_dir_struct_rev</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _dir_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Data_Get
</UL>

<P><STRONG><a name="[7c]"></a>DIR_Data_Get</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DIR_Data_Get &rArr; DIR_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_struct_rev
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>_dir_mko_data_struct_rev</STRONG> (Thumb, 60 bytes, Stack size 144 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Initiate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Finish
</UL>

<P><STRONG><a name="[81]"></a>DNT_MKO_Measure_Initiate</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DNT_MKO_Measure_Initiate &rArr; _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>DNT_Frame_Init</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DNT_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Init
</UL>

<P><STRONG><a name="[6b]"></a>DNT_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = DNT_Init &rArr; DNT_MKO_Measure_Initiate &rArr; _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>DNT_MKO_Read_Initiate</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DNT_MKO_Read_Initiate &rArr; _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>DNT_Frame_Write_to_SA</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DNT_Frame_Write_to_SA &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
</UL>

<P><STRONG><a name="[e8]"></a>DNT_Frame_Build</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DNT_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
</UL>

<P><STRONG><a name="[80]"></a>DNT_MKO_Read_Finish</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DNT_MKO_Read_Finish &rArr; _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>DNT_MKO_Measure_Finish</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DNT_MKO_Measure_Finish &rArr; _dir_mko_data_struct_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>DNT_MKO_Constant_Mode</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = DNT_MKO_Constant_Mode &rArr; F_Trans &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>_adii_data_rev</STRONG> (Thumb, 60 bytes, Stack size 144 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _adii_data_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
</UL>

<P><STRONG><a name="[82]"></a>ADII_Meas_Start</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ADII_Meas_Start &rArr; _adii_data_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adii_data_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>ADII_Frame_Init</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ADII_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADII_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ADII_Init &rArr; ADII_Meas_Start &rArr; _adii_data_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>ADII_Frame_Build</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADII_Frame_Build &rArr; Save_Data_Frame &rArr; _calc_defended_mem_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
</UL>

<P><STRONG><a name="[ec]"></a>_adii_crc_check</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _adii_crc_check
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
</UL>

<P><STRONG><a name="[83]"></a>ADII_Read_Data</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ADII_Read_Data &rArr; _adii_data_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adii_crc_check
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adii_data_rev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryMngFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVCall_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Systick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FT_IF0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FT_IF1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FT_IF2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FT_IF3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CLK_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BKP_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXT_INTERROR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXT_INTERROR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXT_INTERROR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXT_INTERROR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXT_INTERROR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXT_INTERROR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXT_INTERROR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INTERROR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IF_ERR_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IF_FIN_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_ERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_DONE0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_DONE1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ_PORTA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ_PORTB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ_PORTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ_PORTD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ_PORTE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ_PORTF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>INT_ETH0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>INT_ETH1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>INT_SPW0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>INT_SPW1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>INT_TMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>INT_TMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>INT_TMR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>INT_CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>INT_CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>INT_CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>INT_CAN3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>INT_CAN4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>INT_SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>INT_SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>INT_SSP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>INT_SSP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>INT_UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>INT_UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>INT_UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>INT_USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>INT_RX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>INT_TX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>INT_RX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>INT_TX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>INT_MIL1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>INT_ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>INT_DAC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>INT_DAC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>INT_CRYPTO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>INT_CRC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>INT_ECC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a1]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adii_data_rev
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_mko_data_struct_rev
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dir_struct_rev
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpp_struct_rev
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Trans
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Comparison
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pereph_On_and_Get_ID_Frame
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_struct_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Initiate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Finish
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Data_Get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Read_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
</UL>

<P><STRONG><a name="[ed]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[142]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Format_Mem
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Read_Initiate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Measure_Initiate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_MKO_Constant_Mode
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Meas_Start
</UL>

<P><STRONG><a name="[ef]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ee]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Build
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADII_Frame_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Write_to_SA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNT_Frame_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Build
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Frame_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Build
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP_Frame_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[148]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[14d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[ca]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[f7]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[fa]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[fd]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[102]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[ff]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[100]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[150]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[151]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[101]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[105]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[103]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f9]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[fc]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[104]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[106]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[108]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MCU_Temp
</UL>

<P><STRONG><a name="[109]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
</UL>

<P><STRONG><a name="[10b]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[10e]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[10d]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[10f]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
</UL>

<P><STRONG><a name="[154]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[110]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[10a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[f8]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[111]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[fe]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[f6]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[113]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a2]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_IVect
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[aa]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[107]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[fb]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[112]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[10c]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
