<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objs\1986ve8_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objs\1986ve8_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Aug 12 21:01:22 2019
<BR><P>
<H3>Maximum Stack Usage =        316 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Debug_Get_Packet &rArr; UART0_SendPacket &rArr; GetCRC
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryMngFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryMngFault_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVCall_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVCall_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">Systick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Systick_Handler</a><BR>
 <LI><a href="#[c]">FT_IF0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">FT_IF0_Handler</a><BR>
 <LI><a href="#[d]">FT_IF1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FT_IF1_Handler</a><BR>
 <LI><a href="#[e]">FT_IF2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FT_IF2_Handler</a><BR>
 <LI><a href="#[f]">FT_IF3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">FT_IF3_Handler</a><BR>
 <LI><a href="#[10]">CLK_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">CLK_IF_Handler</a><BR>
 <LI><a href="#[11]">PVD_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PVD_IF_Handler</a><BR>
 <LI><a href="#[12]">RTC_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">RTC_IF_Handler</a><BR>
 <LI><a href="#[13]">BKP_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BKP_IF_Handler</a><BR>
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">EXT_INTERROR0_Handler</a><BR>
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">EXT_INTERROR1_Handler</a><BR>
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">EXT_INTERROR2_Handler</a><BR>
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">EXT_INTERROR3_Handler</a><BR>
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EXT_INTERROR4_Handler</a><BR>
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EXT_INTERROR5_Handler</a><BR>
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EXT_INTERROR6_Handler</a><BR>
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">EXT_INTERROR7_Handler</a><BR>
 <LI><a href="#[1c]">IF_ERR_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IF_ERR_SCR_Handler</a><BR>
 <LI><a href="#[1d]">IF_FIN_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IF_FIN_SCR_Handler</a><BR>
 <LI><a href="#[1e]">DMA_ERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DMA_ERR_Handler</a><BR>
 <LI><a href="#[1f]">DMA_DONE0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMA_DONE0_Handler</a><BR>
 <LI><a href="#[20]">DMA_DONE1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMA_DONE1_Handler</a><BR>
 <LI><a href="#[21]">IRQ_PORTA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ_PORTA_Handler</a><BR>
 <LI><a href="#[22]">IRQ_PORTB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ_PORTB_Handler</a><BR>
 <LI><a href="#[23]">IRQ_PORTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ_PORTC_Handler</a><BR>
 <LI><a href="#[24]">IRQ_PORTD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ_PORTD_Handler</a><BR>
 <LI><a href="#[25]">IRQ_PORTE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ_PORTE_Handler</a><BR>
 <LI><a href="#[26]">IRQ_PORTF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ_PORTF_Handler</a><BR>
 <LI><a href="#[27]">INT_ETH0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">INT_ETH0_Handler</a><BR>
 <LI><a href="#[28]">INT_ETH1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">INT_ETH1_Handler</a><BR>
 <LI><a href="#[29]">INT_SPW0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">INT_SPW0_Handler</a><BR>
 <LI><a href="#[2a]">INT_SPW1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">INT_SPW1_Handler</a><BR>
 <LI><a href="#[2e]">INT_TMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">INT_TMR3_Handler</a><BR>
 <LI><a href="#[2f]">INT_TMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">INT_TMR4_Handler</a><BR>
 <LI><a href="#[30]">INT_TMR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">INT_TMR5_Handler</a><BR>
 <LI><a href="#[31]">INT_CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">INT_CAN0_Handler</a><BR>
 <LI><a href="#[32]">INT_CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">INT_CAN1_Handler</a><BR>
 <LI><a href="#[33]">INT_CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">INT_CAN2_Handler</a><BR>
 <LI><a href="#[34]">INT_CAN3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">INT_CAN3_Handler</a><BR>
 <LI><a href="#[35]">INT_CAN4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">INT_CAN4_Handler</a><BR>
 <LI><a href="#[36]">INT_SSP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">INT_SSP0_Handler</a><BR>
 <LI><a href="#[37]">INT_SSP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">INT_SSP1_Handler</a><BR>
 <LI><a href="#[38]">INT_SSP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">INT_SSP2_Handler</a><BR>
 <LI><a href="#[39]">INT_SSP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">INT_SSP3_Handler</a><BR>
 <LI><a href="#[3b]">INT_UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">INT_UART1_Handler</a><BR>
 <LI><a href="#[3c]">INT_UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">INT_UART2_Handler</a><BR>
 <LI><a href="#[3d]">INT_UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">INT_UART3_Handler</a><BR>
 <LI><a href="#[3e]">INT_USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">INT_USB_Handler</a><BR>
 <LI><a href="#[3f]">INT_RX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">INT_RX_ARC0_Handler</a><BR>
 <LI><a href="#[40]">INT_TX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">INT_TX_ARC0_Handler</a><BR>
 <LI><a href="#[41]">INT_RX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">INT_RX_ARC1_Handler</a><BR>
 <LI><a href="#[42]">INT_TX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">INT_TX_ARC1_Handler</a><BR>
 <LI><a href="#[44]">INT_MIL1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">INT_MIL1_Handler</a><BR>
 <LI><a href="#[46]">INT_ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">INT_ADC1_Handler</a><BR>
 <LI><a href="#[47]">INT_DAC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">INT_DAC0_Handler</a><BR>
 <LI><a href="#[48]">INT_DAC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">INT_DAC1_Handler</a><BR>
 <LI><a href="#[49]">INT_CRYPTO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">INT_CRYPTO_Handler</a><BR>
 <LI><a href="#[4a]">INT_CRC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">INT_CRC_Handler</a><BR>
 <LI><a href="#[4b]">INT_ECC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">INT_ECC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">BKP_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[10]">CLK_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1f]">DMA_DONE0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[20]">DMA_DONE1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1e]">DMA_ERR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[c]">FT_IF0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[d]">FT_IF1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[e]">FT_IF2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[f]">FT_IF3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1c]">IF_ERR_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1d]">IF_FIN_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[45]">INT_ADC0_Handler</a> from adc.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[46]">INT_ADC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[31]">INT_CAN0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[32]">INT_CAN1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[33]">INT_CAN2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[34]">INT_CAN3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[35]">INT_CAN4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4a]">INT_CRC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[49]">INT_CRYPTO_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[47]">INT_DAC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[48]">INT_DAC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4b]">INT_ECC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[27]">INT_ETH0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[28]">INT_ETH1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[43]">INT_MIL0_Handler</a> from mko.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[44]">INT_MIL1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3f]">INT_RX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[41]">INT_RX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[29]">INT_SPW0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2a]">INT_SPW1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[36]">INT_SSP0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[37]">INT_SSP1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[38]">INT_SSP2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[39]">INT_SSP3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2b]">INT_TMR0_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2c]">INT_TMR1_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2d]">INT_TMR2_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2e]">INT_TMR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2f]">INT_TMR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[30]">INT_TMR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[40]">INT_TX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[42]">INT_TX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3a]">INT_UART0_Handler</a> from uarts.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3b]">INT_UART1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3c]">INT_UART2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3d]">INT_UART3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3e]">INT_USB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[21]">IRQ_PORTA_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[22]">IRQ_PORTB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[23]">IRQ_PORTC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[24]">IRQ_PORTD_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[25]">IRQ_PORTE_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[26]">IRQ_PORTF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[6]">MemoryMngFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[11]">PVD_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[12]">RTC_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[9]">SVCall_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[b]">Systick_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve8t.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ba]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bb]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[bc]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[be]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[da]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Debug_Get_Packet &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[dd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[de]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[df]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[e0]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[e1]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[97]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buff_rev16
</UL>

<P><STRONG><a name="[e2]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[5c]"></a>Write_Frame</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
</UL>

<P><STRONG><a name="[5e]"></a>Read_Frame</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eerom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
</UL>

<P><STRONG><a name="[88]"></a>Get_Max_Data_Frame_Num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eerom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
</UL>

<P><STRONG><a name="[e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>System_Init</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, sysinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = main &rArr; Debug_Get_Packet &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_1s_step
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_All_Perepherial_Devices_On
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_IVect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_CM_Id
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>MKO_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MKO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>MKO_IVect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MKO_IVect
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Set_Busy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>

<P><STRONG><a name="[7b]"></a>Release_Busy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
</UL>

<P><STRONG><a name="[79]"></a>Write_to_SubAddr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Write_to_SubAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Busy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data_Frame
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[e5]"></a>BlockMKOTransmitter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mko.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>INT_MIL0_Handler</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, mko.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INT_MIL0_Handler &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>Get_MKO_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mko.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>WDT_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>UART0_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>GetCRC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>

<P><STRONG><a name="[7e]"></a>UART0_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
</UL>

<P><STRONG><a name="[80]"></a>UART0_GetPacket</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_GetPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Get_Packet
</UL>

<P><STRONG><a name="[3a]"></a>INT_UART0_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uarts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ADC_Init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>INT_ADC0_Handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INT_ADC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Timers_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>INT_TMR0_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>INT_TMR1_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>INT_TMR2_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Timers_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_All_Perepherial_Devices_On
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>Timers_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[6d]"></a>Timers_Status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_All_Perepherial_Devices_On
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Time_Set</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[70]"></a>Get_Time_s</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Interval
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterval
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>Get_Time_sec_parts</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>SetInterval</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[86]"></a>Check_Interval</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[72]"></a>GPIO_Get_CM_Id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_Gen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>GPIO_TM</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
</UL>

<P><STRONG><a name="[77]"></a>GPIO_Pwr</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_All_Perepherial_Devices_On
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>GPIO_MKO_Id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr_from_gpio
</UL>

<P><STRONG><a name="[87]"></a>Save_Data_Frame</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Save_Data_Frame &rArr; Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[89]"></a>Load_Data_Frame</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, mbkap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Data_Frame_Num
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
</UL>

<P><STRONG><a name="[71]"></a>Write_Parameters</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_Parameters &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>_read_cm_parameters_frame_with_crc16_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
</UL>

<P><STRONG><a name="[8c]"></a>Read_Parameters</STRONG> (Thumb, 74 bytes, Stack size 152 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
</UL>

<P><STRONG><a name="[8f]"></a>_cm_params_set_default</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mbkap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
</UL>

<P><STRONG><a name="[8d]"></a>CM_Parame_Full_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM_Parame_Full_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_params_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Start_Init
</UL>

<P><STRONG><a name="[68]"></a>CM_Parame_Start_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CM_Parame_Start_Init &rArr; Read_Parameters &rArr; _read_cm_parameters_frame_with_crc16_check &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_params_set_default
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>CM_Parame_Operating_Time_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbkap.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_frame_definer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frame_definer
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[69]"></a>Sys_Frame_Init</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Sys_Frame_Init &rArr; crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_definer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>_rev_u32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rev_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[74]"></a>Sys_Frame_Build</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sys_Frame_Build &rArr; Save_Data_Frame &rArr; Write_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rev_u32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_definer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Data_Frame
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_to_SubAddr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>get_mko_addr_from_gpio</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_mko_addr_from_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MKO_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr
</UL>

<P><STRONG><a name="[62]"></a>get_mko_addr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_mko_addr &rArr; get_mko_addr_from_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mko_addr_from_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Pwr_current_process</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pwr_current_process &rArr; Get_Modules_Current &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_Ctrl_by_State
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Debug_Get_Packet</STRONG> (Thumb, 214 bytes, Stack size 280 bytes, mbkap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Debug_Get_Packet &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>_buff_rev16</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mbkap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__REV16
</UL>

<P><STRONG><a name="[98]"></a>uint16_to_log2_uint8_t</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mbkap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[95]"></a>Get_Modules_Current</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_Modules_Current &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
</UL>

<P><STRONG><a name="[6a]"></a>Pwr_All_Perepherial_Devices_On</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pwr_All_Perepherial_Devices_On &rArr; Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>Pwr_Ctrl_by_State</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, power_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pwr_Ctrl_by_State
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_current_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>crc16_ccitt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cm_parameters_frame_with_crc16_check
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameters
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[a1]"></a>Set_STM</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TM
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_1s_step
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STM
</UL>

<P><STRONG><a name="[67]"></a>Init_STM</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_STM &rArr; Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_CM_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>STM_1s_step</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM_1s_step &rArr; Set_STM
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STM
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryMngFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVCall_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Systick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FT_IF0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FT_IF1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FT_IF2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FT_IF3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CLK_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BKP_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXT_INTERROR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXT_INTERROR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXT_INTERROR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXT_INTERROR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXT_INTERROR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXT_INTERROR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXT_INTERROR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INTERROR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IF_ERR_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IF_FIN_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_ERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_DONE0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_DONE1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ_PORTA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ_PORTB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ_PORTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ_PORTD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ_PORTE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ_PORTF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>INT_ETH0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>INT_ETH1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>INT_SPW0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>INT_SPW1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>INT_TMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>INT_TMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>INT_TMR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>INT_CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>INT_CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>INT_CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>INT_CAN3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>INT_CAN4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>INT_SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>INT_SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>INT_SSP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>INT_SSP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>INT_UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>INT_UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>INT_UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>INT_USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>INT_RX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>INT_TX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>INT_RX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>INT_TX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>INT_MIL1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>INT_ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>INT_DAC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>INT_DAC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>INT_CRYPTO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>INT_CRC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>INT_ECC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameters
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Frame
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Frame
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[a3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ea]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Parame_Full_Init
</UL>

<P><STRONG><a name="[a4]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[60]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Frame_Build
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[aa]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ad]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[f6]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[ac]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
</UL>

<P><STRONG><a name="[af]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[b3]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[b2]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[b4]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
</UL>

<P><STRONG><a name="[f7]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Modules_Current
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_log2_uint8_t
</UL>

<P><STRONG><a name="[b5]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[b1]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ab]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[b6]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[ae]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[a9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[b8]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mko.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MKO_IVect
</UL>

<P><STRONG><a name="[7d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[81]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
</UL>

<P><STRONG><a name="[82]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>

<P><STRONG><a name="[b7]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[b0]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
